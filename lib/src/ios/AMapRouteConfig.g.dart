// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_core_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class AMapRouteConfig extends NSObject  {
  //region constants
  static const String name__ = 'AMapRouteConfig';

  @override
  final String tag__ = 'amap_core_fluttify';

  
  //endregion

  //region creators
  static Future<AMapRouteConfig?> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kAmapCoreFluttifyChannel.invokeMethod(
      'ObjectFactory::createAMapRouteConfig',
      {'init': init}
    );
    return AmapCoreFluttifyIOSAs<AMapRouteConfig>(__result__);
  }
  
  static Future<List<AMapRouteConfig?>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kAmapCoreFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchAMapRouteConfig',
      {'length': length, 'init': init}
    );
    return __result_batch__!
        .map((it) => AmapCoreFluttifyIOSAs<AMapRouteConfig>(it))
        .toList();
  }
  
  //endregion

  //region getters
  Future<String> get_appScheme() async {
    final __result__ = await kAmapCoreFluttifyChannel.invokeMethod("AMapRouteConfig::get_appScheme", {'__this__': this});
    return __result__;
  }
  
  Future<String> get_appName() async {
    final __result__ = await kAmapCoreFluttifyChannel.invokeMethod("AMapRouteConfig::get_appName", {'__this__': this});
    return __result__;
  }
  
  Future<CLLocationCoordinate2D?> get_startCoordinate() async {
    final __result__ = await kAmapCoreFluttifyChannel.invokeMethod("AMapRouteConfig::get_startCoordinate", {'__this__': this});
    return AmapCoreFluttifyIOSAs<CLLocationCoordinate2D>(__result__);
  }
  
  Future<CLLocationCoordinate2D?> get_destinationCoordinate() async {
    final __result__ = await kAmapCoreFluttifyChannel.invokeMethod("AMapRouteConfig::get_destinationCoordinate", {'__this__': this});
    return AmapCoreFluttifyIOSAs<CLLocationCoordinate2D>(__result__);
  }
  
  Future<AMapDrivingStrategy> get_drivingStrategy() async {
    final __result__ = await kAmapCoreFluttifyChannel.invokeMethod("AMapRouteConfig::get_drivingStrategy", {'__this__': this});
    return (__result__ as int).toAMapDrivingStrategy();
  }
  
  Future<AMapTransitStrategy> get_transitStrategy() async {
    final __result__ = await kAmapCoreFluttifyChannel.invokeMethod("AMapRouteConfig::get_transitStrategy", {'__this__': this});
    return (__result__ as int).toAMapTransitStrategy();
  }
  
  Future<AMapRouteSearchType> get_routeType() async {
    final __result__ = await kAmapCoreFluttifyChannel.invokeMethod("AMapRouteConfig::get_routeType", {'__this__': this});
    return (__result__ as int).toAMapRouteSearchType();
  }
  
  //endregion

  //region setters
  Future<void> set_appScheme(String appScheme) async {
    await kAmapCoreFluttifyChannel.invokeMethod('AMapRouteConfig::set_appScheme', <String, dynamic>{'__this__': this, "appScheme": appScheme});
  
  
  }
  
  Future<void> set_appName(String appName) async {
    await kAmapCoreFluttifyChannel.invokeMethod('AMapRouteConfig::set_appName', <String, dynamic>{'__this__': this, "appName": appName});
  
  
  }
  
  Future<void> set_startCoordinate(CLLocationCoordinate2D startCoordinate) async {
    await kAmapCoreFluttifyChannel.invokeMethod('AMapRouteConfig::set_startCoordinate', <String, dynamic>{'__this__': this, "startCoordinate": startCoordinate});
  
  
  }
  
  Future<void> set_destinationCoordinate(CLLocationCoordinate2D destinationCoordinate) async {
    await kAmapCoreFluttifyChannel.invokeMethod('AMapRouteConfig::set_destinationCoordinate', <String, dynamic>{'__this__': this, "destinationCoordinate": destinationCoordinate});
  
  
  }
  
  Future<void> set_drivingStrategy(AMapDrivingStrategy drivingStrategy) async {
    await kAmapCoreFluttifyChannel.invokeMethod('AMapRouteConfig::set_drivingStrategy', <String, dynamic>{'__this__': this, "drivingStrategy": drivingStrategy.toValue()});
  
  
  }
  
  Future<void> set_transitStrategy(AMapTransitStrategy transitStrategy) async {
    await kAmapCoreFluttifyChannel.invokeMethod('AMapRouteConfig::set_transitStrategy', <String, dynamic>{'__this__': this, "transitStrategy": transitStrategy.toValue()});
  
  
  }
  
  Future<void> set_routeType(AMapRouteSearchType routeType) async {
    await kAmapCoreFluttifyChannel.invokeMethod('AMapRouteConfig::set_routeType', <String, dynamic>{'__this__': this, "routeType": routeType.toValue()});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion

  @override
  String toString() {
    return 'AMapRouteConfig{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension AMapRouteConfig_Batch on List<AMapRouteConfig> {
  //region getters
  Future<List<String>?> get_appScheme_batch() async {
    final resultBatch = await kAmapCoreFluttifyChannel.invokeMethod("AMapRouteConfig::get_appScheme_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => __result__)?.cast<String>()?.toList();
  }
  
  Future<List<String>?> get_appName_batch() async {
    final resultBatch = await kAmapCoreFluttifyChannel.invokeMethod("AMapRouteConfig::get_appName_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => __result__)?.cast<String>()?.toList();
  }
  
  Future<List<CLLocationCoordinate2D>?> get_startCoordinate_batch() async {
    final resultBatch = await kAmapCoreFluttifyChannel.invokeMethod("AMapRouteConfig::get_startCoordinate_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => AmapCoreFluttifyIOSAs<CLLocationCoordinate2D>(__result__))?.cast<CLLocationCoordinate2D>()?.toList();
  }
  
  Future<List<CLLocationCoordinate2D>?> get_destinationCoordinate_batch() async {
    final resultBatch = await kAmapCoreFluttifyChannel.invokeMethod("AMapRouteConfig::get_destinationCoordinate_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => AmapCoreFluttifyIOSAs<CLLocationCoordinate2D>(__result__))?.cast<CLLocationCoordinate2D>()?.toList();
  }
  
  Future<List<AMapDrivingStrategy>?> get_drivingStrategy_batch() async {
    final resultBatch = await kAmapCoreFluttifyChannel.invokeMethod("AMapRouteConfig::get_drivingStrategy_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => (__result__ as int).toAMapDrivingStrategy())?.cast<AMapDrivingStrategy>()?.toList();
  }
  
  Future<List<AMapTransitStrategy>?> get_transitStrategy_batch() async {
    final resultBatch = await kAmapCoreFluttifyChannel.invokeMethod("AMapRouteConfig::get_transitStrategy_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => (__result__ as int).toAMapTransitStrategy())?.cast<AMapTransitStrategy>()?.toList();
  }
  
  Future<List<AMapRouteSearchType>?> get_routeType_batch() async {
    final resultBatch = await kAmapCoreFluttifyChannel.invokeMethod("AMapRouteConfig::get_routeType_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => (__result__ as int).toAMapRouteSearchType())?.cast<AMapRouteSearchType>()?.toList();
  }
  
  //endregion

  //region setters
  Future<void> set_appScheme_batch(List<String> appScheme) async {
    await kAmapCoreFluttifyChannel.invokeMethod('AMapRouteConfig::set_appScheme_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "appScheme": appScheme[__i__]}]);
  
  
  }
  
  Future<void> set_appName_batch(List<String> appName) async {
    await kAmapCoreFluttifyChannel.invokeMethod('AMapRouteConfig::set_appName_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "appName": appName[__i__]}]);
  
  
  }
  
  Future<void> set_startCoordinate_batch(List<CLLocationCoordinate2D> startCoordinate) async {
    await kAmapCoreFluttifyChannel.invokeMethod('AMapRouteConfig::set_startCoordinate_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "startCoordinate": startCoordinate[__i__]}]);
  
  
  }
  
  Future<void> set_destinationCoordinate_batch(List<CLLocationCoordinate2D> destinationCoordinate) async {
    await kAmapCoreFluttifyChannel.invokeMethod('AMapRouteConfig::set_destinationCoordinate_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "destinationCoordinate": destinationCoordinate[__i__]}]);
  
  
  }
  
  Future<void> set_drivingStrategy_batch(List<AMapDrivingStrategy> drivingStrategy) async {
    await kAmapCoreFluttifyChannel.invokeMethod('AMapRouteConfig::set_drivingStrategy_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "drivingStrategy": drivingStrategy[__i__].toValue()}]);
  
  
  }
  
  Future<void> set_transitStrategy_batch(List<AMapTransitStrategy> transitStrategy) async {
    await kAmapCoreFluttifyChannel.invokeMethod('AMapRouteConfig::set_transitStrategy_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "transitStrategy": transitStrategy[__i__].toValue()}]);
  
  
  }
  
  Future<void> set_routeType_batch(List<AMapRouteSearchType> routeType) async {
    await kAmapCoreFluttifyChannel.invokeMethod('AMapRouteConfig::set_routeType_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "routeType": routeType[__i__].toValue()}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}