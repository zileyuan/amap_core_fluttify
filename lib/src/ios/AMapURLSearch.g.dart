// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_core_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class AMapURLSearch extends NSObject  {
  //region constants
  static const String name__ = 'AMapURLSearch';

  @override
  final String tag__ = 'amap_core_fluttify';

  
  //endregion

  //region creators
  static Future<AMapURLSearch?> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kAmapCoreFluttifyChannel.invokeMethod(
      'ObjectFactory::createAMapURLSearch',
      {'init': init}
    );
    return AmapCoreFluttifyIOSAs<AMapURLSearch>(__result__);
  }
  
  static Future<List<AMapURLSearch?>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kAmapCoreFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchAMapURLSearch',
      {'length': length, 'init': init}
    );
    return __result_batch__!
        .map((it) => AmapCoreFluttifyIOSAs<AMapURLSearch>(it))
        .toList();
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<void> getLatestAMapApp() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: AMapURLSearch::getLatestAMapApp([])');
    }
  
    // invoke native method
    final __result__ = await kAmapCoreFluttifyChannel.invokeMethod('AMapURLSearch::getLatestAMapApp', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<bool> openAMapNavigation(AMapNaviConfig config) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: AMapURLSearch::openAMapNavigation([])');
    }
  
    // invoke native method
    final __result__ = await kAmapCoreFluttifyChannel.invokeMethod('AMapURLSearch::openAMapNavigation', {"config": config});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<bool> openAMapRouteSearch(AMapRouteConfig config) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: AMapURLSearch::openAMapRouteSearch([])');
    }
  
    // invoke native method
    final __result__ = await kAmapCoreFluttifyChannel.invokeMethod('AMapURLSearch::openAMapRouteSearch', {"config": config});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<bool> openAMapPOISearch(AMapPOIConfig config) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: AMapURLSearch::openAMapPOISearch([])');
    }
  
    // invoke native method
    final __result__ = await kAmapCoreFluttifyChannel.invokeMethod('AMapURLSearch::openAMapPOISearch', {"config": config});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'AMapURLSearch{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension AMapURLSearch_Batch on List<AMapURLSearch> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<void>> getLatestAMapApp_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kAmapCoreFluttifyChannel.invokeMethod('AMapURLSearch::getLatestAMapApp_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<bool>> openAMapNavigation_batch(List<AMapNaviConfig> config) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kAmapCoreFluttifyChannel.invokeMethod('AMapURLSearch::openAMapNavigation_batch', [for (int __i__ = 0; __i__ < config.length; __i__++) {"config": config[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  static Future<List<bool>> openAMapRouteSearch_batch(List<AMapRouteConfig> config) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kAmapCoreFluttifyChannel.invokeMethod('AMapURLSearch::openAMapRouteSearch_batch', [for (int __i__ = 0; __i__ < config.length; __i__++) {"config": config[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  static Future<List<bool>> openAMapPOISearch_batch(List<AMapPOIConfig> config) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kAmapCoreFluttifyChannel.invokeMethod('AMapURLSearch::openAMapPOISearch_batch', [for (int __i__ = 0; __i__ < config.length; __i__++) {"config": config[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  //endregion
}